import { Test, TestingModule } from '@nestjs/testing';
import { StarshipsService } from './starships.service';
import { Repository } from 'typeorm';
import { Starship } from './entities/starship.entity';
import { Film } from '../films/entities/film.entity';
import { Person } from '../people/entities/person.entity';
import { CreateStarshipDto } from './dto/create-starship.dto';

describe('StarshipsService', () => {
  let service: StarshipsService;
  let starshipRepository: Repository<Starship>;
  let filmRepository: Repository<Film>;
  let peopleRepository: Repository<Person>;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [StarshipsService,
        {
          provide:'PEOPLE_REPOSITORY',
          useClass: Repository,
        },
        {
          provide:'FILM_REPOSITORY',
          useClass: Repository,
        },
        {
          provide:'STARSHIP_REPOSITORY',
          useClass: Repository,
        },
      ],
    }).compile();

    service = module.get<StarshipsService>(StarshipsService);
    starshipRepository = module.get('STARSHIP_REPOSITORY');
    filmRepository = module.get('FILM_REPOSITORY');
    peopleRepository = module.get('PEOPLE_REPOSITORY');
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should create a new starship', async () => {
    // Mock DTO object
    const createStarshipDto: CreateStarshipDto = {
      MGLT: 'some_value',
      cargo_capacity: 100,
      consumables: 'some_value',
      cost_in_credits: 1000,
      crew: 'some_value',
      hyperdrive_rating: 'some_value',
      length: 50,
      manufacturer: 'some_value',
      max_atmosphering_speed: 'some_value',
      model: 'some_value',
      name: 'Starship 1',
      passengers: 10,
      starship_class: 'some_value',
      films: [], 
      pilots: [], 
    };
    

    // Mock existing starship
    jest.spyOn(starshipRepository, 'findOne').mockResolvedValueOnce(null);

    // Mock repositories' find method
    jest.spyOn(filmRepository, 'find').mockResolvedValue([]);
    jest.spyOn(peopleRepository, 'find').mockResolvedValue([]);

    // Mock the save method of the repository
    jest.spyOn(starshipRepository, 'save').mockImplementation(async () => {
      // Mock the saved starship
      return {
        ...createStarshipDto,
        id: 1, // Assuming the ID generated by the database
      } as Starship;
    });

    // Call the create method
    const createdStarship = await service.create(createStarshipDto);

    // Assertions
    expect(createdStarship).toBeDefined();
    expect(createdStarship.name).toEqual(createStarshipDto.name);
    expect(starshipRepository.findOne).toHaveBeenCalledWith({
      where: { name: createStarshipDto.name },
    });
    expect(starshipRepository.save).toHaveBeenCalledWith(expect.any(Starship));
  });

});
